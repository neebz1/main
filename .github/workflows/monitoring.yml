name: DevOps Monitoring - Health Check

on:
  # Run every hour
  schedule:
    - cron: '0 * * * *'
  
  # Allow manual trigger
  workflow_dispatch:
  
  # Run on push to main
  push:
    branches: [ main ]
  
  # Run on pull requests
  pull_request:
    branches: [ main ]

jobs:
  health-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install psutil requests python-dotenv pytest
      
      - name: Run health check
        env:
          TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          MOONSHOT_API_KEY: ${{ secrets.MOONSHOT_API_KEY }}
        run: |
          python devops_monitor.py --check --json > monitoring_output.json
          cat monitoring_output.json
      
      - name: Upload monitoring report
        uses: actions/upload-artifact@v4
        with:
          name: monitoring-report-${{ github.run_number }}
          path: |
            monitoring_reports/
            monitoring_output.json
          retention-days: 30
      
      - name: Check for critical issues
        run: |
          if grep -q "CRITICAL" monitoring_output.json; then
            echo "::error::Critical issues detected in system health check"
            exit 1
          fi
      
      - name: Create issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let reportData = {};
            try {
              const reportContent = fs.readFileSync('monitoring_output.json', 'utf8');
              reportData = JSON.parse(reportContent);
            } catch (e) {
              console.log('Could not read monitoring report');
            }
            
            const issueBody = `## ðŸš¨ Monitoring Alert
            
            **Timestamp:** ${reportData.timestamp || new Date().toISOString()}
            
            ### Issues Found:
            ${reportData.issues_found ? reportData.issues_found.map(i => `- ${i}`).join('\n') : 'See workflow logs'}
            
            ### Recommendations:
            ${reportData.recommendations ? reportData.recommendations.map(r => `- ${r}`).join('\n') : 'See workflow logs'}
            
            **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ DevOps Monitoring Alert: System Health Check Failed',
              body: issueBody,
              labels: ['monitoring', 'automated', 'priority-high']
            });
